package com.example.mddanish.myapplication;

import android.app.Activity;
import android.os.Bundle;
import android.text.Html;
import android.widget.TextView;

/**
 * Created by MD DANISH on 01-01-2017.
 */
public class Inheritance extends Activity {
    TextView tv;

    public Inheritance()
    {
    }

    protected void onCreate(Bundle bundle)
    {
        super.onCreate(bundle);
        setContentView(R.layout.abst_class);
        tv = (TextView) findViewById(R.id.textView1);
        tv.setText(Html.fromHtml("<h1><font color=#ff0000>What is Inheritance in Java Programming?</font></h1><b>Inheritance</b> is one of the feature of Object-Oriented Programming (OOPs). Inheritance allows a class to use the properties and methods of another class. In other words, the derived class inherits the states and behaviors from the base class. The derived class is also called subclass and the base class is also known as super-class. The derived class can add its own additional variables and methods. These additional variable and methods differentiates the derived class from the base class.Inheritance is a compile-time mechanism. A super-class can have any number of subclasses. But a subclass can have only one superclass. This is because Java does not support multiple inheritance.The superclass and subclass have \u201Cis-a\u201D relationship betweenthem. Let\u2019s have a look at the example below.<b><br></br><br></br><font color=#82E0AA ><big>Inheritance Example</big></b></font></font><br></br><br></br>Let\u2019s consider a superclass Vehicle. Different vehicles have different features and properties however there few of them are common to all. Speed, color, fuel used, size are few which are common to all. Hence we can create a class \u2018Vehicle\u2019 with states and actions that are common to all vehicles. The subclass of this superclass can be any type of vehicle. Example: Class Car  A has all the features of a vehicle. But it has its own attributes which makes it different from other subclasses. By using inheritance we need not rewrite the code that we\u2019ve already used with the Vehicle. The subclass can also be extended. We can make a class \u2018Sports Car\u2019 which extends \u2018Car\u2019. It inherits the features of both \u2018Vehicle\u2019 and \u2018Car\u2019.<br></br>The keyword used for inheritance is extends.<br></br><b><font color=#5DADE2>Syntax:</b></font><br></br>public class ChildClass extends BaseClass  { <br></br>// derived class methods extend and possibly override<br></br>}<br></br><br></br><b><font color=#F1C40F>Note:</font></b> <i>The derived class inherits all the members and methods that are declared as public or protected. If declared as private it can not be inherited by the derived classes. The private members can be accessed only in its own class. The private members can be accessed through assessor methods as shown in the example below. The derived class cannot inherit a member of the base class if the derived class declares another member with the same name.</i><h2><font color=#ff0000>Types Of Inheritance<br></br></font></h2><br></br><b><font color=#D2B4DE>1.</font></b>multilevel inheritance<br></br><b><font color=#D2B4DE>2.</font></b>multiple inheritance<br></br><b><font color=#D2B4DE>3.</font></b>hybrid inheritance<br></br><b><font color=#D2B4DE>4.</font></b>hierarchical inheritance<br></br><br></br><big><font color=#82E0AA><b>Constructors and Inheritance</b></font></big><br></br><br></br>The constructor in the superclass is responsible for building the object of the superclass and the constructor of the subclass builds the object of subclass. When the subclass constructor is called during object creation, it by default invokes the default constructor of super-class. Hence, in inheritance the objects are constructed top-down. The superclass constructor can be called explicitly using the keyword super, but it should be first statement in a constructor. The keyword super always refers to the superclass immediately above of the calling class in the hierarchy. The use of multiple super keywords to access an ancestor class other than the direct parent is illegal.<br></br><br></br><big><font color=#82E0AA><b>Inheritance and Method Overriding</b></font></big><br></br><br></br>By using super we can access the overridden method in the super class.<br></br><br></br><big><font color=#82E0AA><b>Inheritance & Abstract Classes</b></font></big><br></br><br></br>The superclasses are more general than their subclasses. Usually, the superclasses are made abstract so that the objects of its prototype cannot be made. So the objects of only the subclasses can be used. To make a class abstract, the keyword abstract is used in the class definition.Abstract methods are methods which do not have method statements. The subclasse provides the method statements. The methods provided by the superclass needs to be overridden by the subclass. The class that has at least one abstract method should be made abstract. The abstract class can not be instantiated because it does not define a complete implementation.<br></br><br></br><b><font color=#5DADE2>Using Final with methods:</b></font><br></br><br></br>We can prevent a method from being overridden by using the keyword final at the start of its declaration. Final methods can not be overridden.The method showattributes() cannot be overridden in the class rectangle because it is declared as final in class shape. It shows an error when we try to override it.<br></br><br></br><b><font color=#5DADE2>Using Final with class:<br></br></b></font>  <br></br>We can also prevent inheritance by making a class final. When a class is declared as final, its methods also become final. An abstract class cannot be declared as final because an abstract class is incomplete and its subclasses need to provide the implementation.<br></br>The class shape cannot be inherited because it is declared as final. It will show an error when we try to inherit it."));
    }
}
